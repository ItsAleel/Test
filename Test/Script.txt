import requests
import subprocess
import os
import sys

# Constants
REPO_OWNER = 'ItsAleel'
REPO_NAME = 'Test'
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/releases/latest"
DOWNLOAD_PATH = "/path/to/downloaded/installer"  # Adjust this path as needed

def get_current_version():
    # Implement a way to get your app's current version.
    # This will be specific to how your app's version is stored/managed.
    return '0.0.0'  # Placeholder for the current version

def get_latest_release():
    try:
        response = requests.get(GITHUB_API_URL)
        response.raise_for_status()  # Raise an error if the request failed
        return response.json()
    except requests.RequestException as e:
        print(f"Error checking for updates: {e}")
        sys.exit(1)

def download_update(url, download_path):
    try:
        response = requests.get(url)
        response.raise_for_status()
        with open(download_path, 'wb') as f:
            f.write(response.content)
    except requests.RequestException as e:
        print(f"Error downloading update: {e}")
        sys.exit(1)

def install_update(installer_path):
    # Adjust the following command to suit the installer you have (e.g., .exe, .dmg, .sh)
    if sys.platform == "win32":
        subprocess.run([installer_path], check=True)
    elif sys.platform == "darwin":
        # For macOS, you might use subprocess to call 'hdiutil' to mount a DMG, etc.
        pass
    elif sys.platform == "linux":
        # For Linux, you might call subprocess to execute a .deb or .sh installer.
        pass

def check_for_updates():
    current_version = get_current_version()
    latest_release = get_latest_release()
    latest_version = latest_release['tag_name']

    # Assuming the version tag doesn't include the 'v' prefix
    if latest_version > current_version:
        print(f"Update available: {latest_version}")
        asset = next((asset for asset in latest_release['assets'] if asset['name'].endswith('.exe')), None)
        if asset:
            download_url = asset['browser_download_url']
            download_path = os.path.join(DOWNLOAD_PATH, asset['name'])
            print("Downloading update...")
            download_update(download_url, download_path)
            print("Installing update...")
            install_update(download_path)
            print("Update installed successfully.")
        else:
            print("No suitable installer found for the update.")
    else:
        print("Your application is up to date.")

if __name__ == "__main__":
    check_for_updates()
